package uz.gita.musicplayerapp.data.source.local.implimport android.content.ContentUrisimport android.content.Contextimport android.database.Cursorimport android.provider.MediaStoreimport dagger.hilt.android.qualifiers.ApplicationContextimport uz.gita.musicplayerapp.data.models.AudioModelimport uz.gita.musicplayerapp.data.source.local.ContentResolverHelperimport javax.inject.Injectclass ContentResolverHelperImpl @Inject constructor(    @ApplicationContext val context: Context,) : ContentResolverHelper {    private var mCursor: Cursor? = null    private val projection: Array<String> = arrayOf(        MediaStore.Audio.AudioColumns.DISPLAY_NAME,        MediaStore.Audio.AudioColumns._ID,        MediaStore.Audio.AudioColumns.ARTIST,        MediaStore.Audio.AudioColumns.DATA,        MediaStore.Audio.AudioColumns.DURATION,        MediaStore.Audio.AudioColumns.TITLE    )    private val selectClause: String = "${MediaStore.Audio.AudioColumns.IS_MUSIC} = ?"    private val selectionArgs = arrayOf("1")    private val sortOrder = "${MediaStore.Audio.AudioColumns.DISPLAY_NAME} ASC"    override suspend fun getAudioData(): List<AudioModel> {        return getCursorData()    }    private fun getCursorData(): List<AudioModel> {        val audioList = mutableListOf<AudioModel>()        mCursor = context.contentResolver.query(            MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,            projection,            selectClause,            selectionArgs,            sortOrder        )        mCursor?.use { cursor ->            val idColumn =                cursor.getColumnIndexOrThrow(MediaStore.Audio.AudioColumns._ID)            val displayNameColumn =                cursor.getColumnIndexOrThrow(MediaStore.Audio.AudioColumns.DISPLAY_NAME)            val artistColumn =                cursor.getColumnIndexOrThrow(MediaStore.Audio.AudioColumns.ARTIST)            val dataColumn =                cursor.getColumnIndexOrThrow(MediaStore.Audio.AudioColumns.DATA)            val durationColumn =                cursor.getColumnIndexOrThrow(MediaStore.Audio.AudioColumns.DURATION)            val titleColumn =                cursor.getColumnIndexOrThrow(MediaStore.Audio.AudioColumns.TITLE)            cursor.apply {                if (count != 0) {                    while (cursor.moveToNext()) {                        val displayName = getString(displayNameColumn)                        val id = getLong(idColumn)                        val artistName = getString(artistColumn)                        val data = getString(dataColumn)                        val duration = getInt(durationColumn)                        val title = getString(titleColumn)                        val uri = ContentUris.withAppendedId(                            MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,                            id                        )                        audioList.add(                            AudioModel(                                uri,                                displayName,                                id,                                artistName,                                data,                                duration,                                title                            )                        )                    }                }            }        }        return audioList    }}