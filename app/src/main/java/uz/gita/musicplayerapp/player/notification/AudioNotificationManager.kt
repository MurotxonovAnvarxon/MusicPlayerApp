package uz.gita.musicplayerapp.player.notificationimport android.annotation.SuppressLintimport android.app.Notificationimport android.app.NotificationChannelimport android.content.Contextimport android.os.Buildimport androidx.annotation.RequiresApiimport androidx.core.app.NotificationCompatimport androidx.core.app.NotificationManagerCompatimport androidx.media3.common.util.UnstableApiimport androidx.media3.exoplayer.ExoPlayerimport androidx.media3.session.MediaSessionimport androidx.media3.session.MediaSessionServiceimport androidx.media3.ui.PlayerNotificationManagerimport dagger.hilt.android.qualifiers.ApplicationContextimport uz.gita.musicplayerapp.Rimport javax.inject.Injectprivate const val NOTIFICATION_ID = 101private const val NOTIFICATION_CHANNEL_NAME = "notificationChannelName"private const val NOTIFICATION_CHANNEL_ID = "notificationChannelID"class AudioNotificationManager @Inject constructor(    @ApplicationContext val context: Context,    private val exoPlayer: ExoPlayer,) {    private val notificationManager: NotificationManagerCompat =        NotificationManagerCompat.from(context)    init {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            createNotificationChannel()        }    }    @SuppressLint("WrongConstant")    @RequiresApi(Build.VERSION_CODES.O)    private fun createNotificationChannel() {        val channel = NotificationChannel(            NOTIFICATION_CHANNEL_ID,            NOTIFICATION_CHANNEL_NAME,            NotificationManagerCompat.IMPORTANCE_HIGH        )        notificationManager.createNotificationChannel(channel)    }    @UnstableApi    private fun buildNotification(mediaSession: MediaSession) {        PlayerNotificationManager.Builder(            context, NOTIFICATION_ID, NOTIFICATION_CHANNEL_ID        ).setMediaDescriptionAdapter(            AudioNotificationAdapter(context, mediaSession.sessionActivity)        )            .setSmallIconResourceId(R.drawable.placeholder)            .build()            .apply {                this.setMediaSessionToken(mediaSession.sessionCompatToken)                this.setUseFastForwardActionInCompactView(true)                this.setUseRewindActionInCompactView(true)                this.setUseNextActionInCompactView(true)                this.setPriority(NotificationCompat.PRIORITY_HIGH)                this.setPlayer(exoPlayer)            }    }    @RequiresApi(Build.VERSION_CODES.O)    @UnstableApi    fun startNotificationService(        mediaSession: MediaSession,        mediaSessionService: MediaSessionService,    ) {        buildNotification(mediaSession)        startForegroundService(mediaSessionService)    }    @RequiresApi(Build.VERSION_CODES.O)    fun startForegroundService(mediaSessionService: MediaSessionService) {        val notification = Notification.Builder(context, NOTIFICATION_CHANNEL_ID)            .setCategory(Notification.CATEGORY_SERVICE)            .build()        mediaSessionService.startForeground(NOTIFICATION_ID, notification)    }}