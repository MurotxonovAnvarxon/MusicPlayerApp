package uz.gita.musicplayerapp.presentor.screen.homeimport android.content.Contextimport android.graphics.Bitmapimport android.graphics.BitmapFactoryimport android.media.MediaMetadataRetrieverimport android.net.Uriimport androidx.compose.foundation.Imageimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsIndexedimport androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.BottomSheetValueimport androidx.compose.material.ExperimentalMaterialApiimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Pauseimport androidx.compose.material.icons.filled.PlayArrowimport androidx.compose.material.icons.filled.SkipNextimport androidx.compose.material.icons.filled.SkipPreviousimport androidx.compose.material.rememberBottomSheetStateimport androidx.compose.material3.BottomSheetScaffoldimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Iconimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Textimport androidx.compose.material.rememberBottomSheetScaffoldStateimport androidx.compose.runtime.Composableimport androidx.compose.runtime.Stateimport androidx.compose.runtime.collectAsStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.asImageBitmapimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextOverflowimport androidx.compose.ui.unit.dpimport cafe.adriel.voyager.androidx.AndroidScreenimport cafe.adriel.voyager.hilt.getScreenModelimport uz.gita.musicplayerapp.Rimport uz.gita.musicplayerapp.presentor.components.MusicItemimport uz.gita.musicplayerapp.presentor.components.PlayerIconItemclass MainScreen : AndroidScreen() {    @Composable    override fun Content() {        val vm = getScreenModel<MainViewModel>()        vm.onEventDispatcher(MainContract.Event.LoadAudioData)        HomeScreenContent(            uiState = vm.container.stateFlow.collectAsState(),            onEventDispatcher = vm::onEventDispatcher        )    }}@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterialApi::class)@Composablefun HomeScreenContent(    uiState: State<MainContract.UIState>,    onEventDispatcher: (MainContract.Event) -> Unit,) {    val sheetState = rememberBottomSheetState(        initialValue = BottomSheetValue.Collapsed    )    val scaffoldState = rememberBottomSheetScaffoldState(        bottomSheetState = sheetState    )    Box(contentAlignment = Alignment.BottomCenter) {        LazyColumn(modifier = Modifier.fillMaxSize()) {            itemsIndexed(uiState.value.audioList) { index, audio ->                MusicItem(musicData = audio) {                    onEventDispatcher(MainContract.Event.OnItemClick(index))                }            }        }        if (uiState.value.currentAudioModel.title.isNotEmpty()) {            BottomSheetScaffold(sheetShape = RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp),//                scaffoldState = scaffoldState,                sheetContent = {                    Row(modifier = Modifier                        .clickable { onEventDispatcher.invoke(MainContract.Event.MoveToPlay) }                        .padding(4.dp),                        verticalAlignment = Alignment.CenterVertically                    ) {                        Image(                            modifier = Modifier                                .size(48.dp)                                .padding(4.dp)                                .clip(CircleShape),                            bitmap = getAlbumArt(                                LocalContext.current,                                uiState.value.currentAudioModel.uri                            ).asImageBitmap(), contentDescription = "Audio image"                        )                        Spacer(modifier = Modifier.size(4.dp))                        Column(modifier = Modifier.weight(1f)) {                            Text(                                text = uiState.value.currentAudioModel.title,                                fontWeight = FontWeight.Bold,                                style = MaterialTheme.typography.titleLarge,                                overflow = TextOverflow.Clip,                                maxLines = 1,                            )                            Spacer(modifier = Modifier.size(4.dp))                            Text(                                text = uiState.value.currentAudioModel.artist,                                fontWeight = FontWeight.Normal,                                style = MaterialTheme.typography.titleSmall,                                overflow = TextOverflow.Clip,                                maxLines = 1                            )                        }                        Spacer(modifier = Modifier.size(4.dp))                        Icon(imageVector = Icons.Default.SkipPrevious,                            contentDescription = null,                            modifier = Modifier.clickable { onEventDispatcher(MainContract.Event.onPrev) })                        Spacer(modifier = Modifier.size(8.dp))                        PlayerIconItem(                            icon = if (!uiState.value.isAudioPlaying) {                                Icons.Default.Pause                            } else {                                Icons.Default.PlayArrow                            }                        ) {                            onEventDispatcher(MainContract.Event.onStart)                        }                        Spacer(modifier = Modifier.size(8.dp))                        Icon(imageVector = Icons.Default.SkipNext, contentDescription = null,                            modifier = Modifier.clickable { onEventDispatcher(MainContract.Event.onPrev) })                    }                },                content = {                })        }    }}fun getAlbumArt(context: Context, uri: Uri): Bitmap {    val mmr = MediaMetadataRetriever()    mmr.setDataSource(context, uri)    val data = mmr.embeddedPicture    return if (data != null) {        BitmapFactory.decodeByteArray(data, 0, data.size)    } else {        BitmapFactory.decodeResource(context.resources, R.drawable.placeholder)    }}